@startuml crypta zombi
skinparam classMargin 18
skinparam linetype ortho
skinparam ClassBackgroundColor<<Personaje>> blue
skinparam ClassBackgroundColor<<Enemigo>> red
skinparam ClassBackgroundColor<<Mundo>> green

' --- Clase principal ---
class Juego {
 - titulo: String
 - descripcion: String
 - mundoActual: Mundo
 - mundos: List<Mundo>
 - jugadores: List<PersonajeJugable>
 + iniciarJuego(): void
 + terminarJuego(): void
 + avanzarNivel(): boolean
 + agregarJugador(jugador: PersonajeJugable): void
 + eliminarJugador(jugador: PersonajeJugable): void
 + mostrarEstadisticas(): void
 + verificarDerrota(): boolean
}

Juego *-- Mundo : composición
Juego o-- PersonajeJugable : agregación
Juego *-- EventoAleatorio : composición
Juego --> Inventario : "gestiona objetos" [0..*]
Juego --> PanelEstadisticas : "envía estadísticas" [1..1]
Juego --> VentanaJuego : "actualiza y visualiza" [1..1]
Juego --> GestorGuardado : "guarda progreso" [1..1]
Juego --> GestorSonido : "reproduce sonidos" [1..1]

' --- Clase VentanaJuego ---
class VentanaJuego {
 + activar(): void
 + enviarComandos(): void
}  

VentanaJuego --> PanelMundo : "muestra" [1..1]
VentanaJuego --> PanelEstadisticas : "muestra" [1..1]
VentanaJuego --> ControladorTurnos : "activa" [1..1]
VentanaJuego --> ControladorAcciones : "envía comandos" [1..*]
VentanaJuego --> GestorSonido : "reproduce sonidos" [0..1]
VentanaJuego --> Animación : "activa animaciones" [0..*]
VentanaJuego --> GestorGuardado : "gestiona progreso" [1..1]
VentanaJuego --> Juego : "envía comandos de interacción" [1..1]

' --- Clase PanelMundo ---
class PanelMundo {
 + visualizarElementos(): void
}
 
PanelMundo --> Mundo : "visualiza" [1..1]
PanelMundo --> PersonajeJugable : "muestra" [0..*]
PanelMundo --> Enemigo : "muestra" [0..*]
PanelMundo --> Trampa : "visualiza" [0..*]
PanelMundo --> Coordenada : "utiliza para posicionar" [1..*]
PanelMundo --> Animación : "muestra animaciones" [0..*]

' --- Agrupación: Mundos ---
package "Mundos" {  
  class Mundo {
  - dimensiones: Matriz[20][20]
  - tipoAmbiente: String
  - trampas: List<Trampa>
  - enemigos: List<Enemigo>
  - personajes: List<PersonajeJugable>
  - objetos: List<Object>
  + generarMundo(): void
  + agregarPersonaje(personaje: PersonajeJugable): boolean
  + eliminarPersonaje(personaje: PersonajeJugable): boolean
  + agregarEnemigo(enemigo: Enemigo): void
  + eliminarEnemigo(enemigo: Enemigo): void
  + colocarObjeto(objeto: Object, coordenada: Coordenada): boolean
  + moverPersonaje(personaje: PersonajeJugable, coordenada: Coordenada): boolean
  + activarTrampas(): void
  + actualizarEstado(): void
  + verificarCondicionesVictoria(): boolean
  + verificarCondicionesDerrota(): boolean
    }
    Mundo *-- Trampa : composición
    Mundo *-- Enemigo : composición
    Mundo *-- Acertijo : composición
    Mundo *-- Poción : composición
    Mundo *-- Animación : composición
    Mundo *-- PersonajeJugable : composición

    class Bosque extends Mundo {
  + generarMundo(): void
  + activarTrampas(): void
  + generarVegetacion(): void
  + generarTrampasNaturales(): void
    }
   
    class Cementerio extends Mundo {
  + generarMundo(): void
  + activarTrampas(): void
  + invocarZombies(): void
  + generarTumbas(): void
    }
   
    class Castillo extends Mundo {
  + generarMundo(): void
  + activarTrampas(): void
  + activarMaleficio(): void
  + generarHabitaciones(): void
  + colocarPuertas(): void
    }
}

' --- Agrupación: Trampas ---
package "Trampas" {
    class Trampa {
        - tipoTrampa: String
        - daño: int
        - posicion: Coordenada
        + activar(): void
    }
    Trampa --> Coordenada : "localizada en" [1..1]
    class HoyoSinFondo extends Trampa {
        - profundidad: int
        + eliminarPersonaje(): void
    }
    class LaserMortal extends Trampa {
 - alcance: int
  + activar(): void
  + dispararLaser(): void
    }
    class PuertaCerrada extends Trampa {
        - requiereLlave: boolean
        - acertijoAsociado: Acertijo
        + desbloquear(llave: Llave): boolean
    }
' --- Clase Acertijo ---
class Acertijo {
 - descripcion: String
 - dificultad: String
 + resolver(aciertos: int): boolean
}
PuertaCerrada *-- Acertijo : composición
}
' --- Agrupación: Personajes Jugables ---
package "Personajes Jugables" {
   abstract class PersonajeJugable {
        - nombre: String
        - rango: String
        - daño: int
        - salud: int
        - movimientoPorTurno: int
        - habilidadesEspeciales: List<String>
        + mover(cuadros: int): void
        + atacar(): void
        + usarHabilidadEspecial(): void
    }
    PersonajeJugable --> Inventario : "posee" [1..1]
    PersonajeJugable --> Trampa : "interactúa con" [0..*]
    PersonajeJugable --> Llave : "recolecta" [0..*]
    PersonajeJugable --> Enemigo : "ataca" [0..*]
    PersonajeJugable --> GestorSonido : "genera sonidos" [1..*]
   
    class CazadorDeZombies extends PersonajeJugable {
  - habilidad: String = "Disparo de escopeta (daño alto en un rango de 2 cuadros)"
  - accionEspecial: String = "Colocar trampas para zombies"
  + dispararEscopeta(): void
  + colocarTrampa(): void
    }
    
    class MedicoDeCampo extends PersonajeJugable {
  - habilidad: String = "Cura a aliados en un rango de 3 cuadros"
  - accionEspecial: String = "Revivir a un personaje caído una vez por partida"
  + curarAliados(): void
  + revivirPersonaje(): void
    }
   
    class Nigromante extends PersonajeJugable {
  - habilidad: String = "Invoca esqueletos aliados para luchar"
  - accionEspecial: String = "Controlar a un zombie por un turno"
  + invocarEsqueleto(): void
  + controlarZombie(): void
    }
   
    class CaballeroFantasma extends PersonajeJugable {
  - habilidad: String = "Ataque de espada que ignora armaduras"
  - accionEspecial: String = "Teletransportarse a cualquier cuadro vacío"
  + ataqueEspada(): void
  + teletransportarse(): void
    }
  
    class LadronDeTumbas extends PersonajeJugable {
  - habilidad: String = "Roba objetos de los enemigos"
  - accionEspecial: String = "Desactivar trampas"
  + robarObjeto(): void
  + desactivarTrampa(): void
    }
    
     LadronDeTumbas --> Trampa : "desactiva" [0..1]
class BrujaOscura extends PersonajeJugable {
  - habilidad: String = "Lanza hechizos de veneno que dañan con el tiempo"
  - accionEspecial: String = "Maldecir a un enemigo, reduciendo su daño"
  + lanzarVeneno(): void
  + maldecirEnemigo(): void
    }
    
    class ZombieAmistoso extends PersonajeJugable {
  - habilidad: String = "Atrae a otros zombies para distraerlos"
  - accionEspecial: String = "Infectar a un enemigo, convirtiéndolo en aliado"
  + atraerZombies(): void
  + infectarEnemigo(): void
}
   
    class Explorador extends PersonajeJugable {
  - habilidad: String = "Movimiento adicional por turno"
  - accionEspecial: String = "Revelar áreas ocultas del mapa"
  + movimientoExtra(): void
  + revelarMapa(): void
    }
   
    Explorador --> Trampa : "revela" [0..*]

    class Sacerdote extends PersonajeJugable {
  - habilidad: String = "Exorciza enemigos, eliminando zombies con un solo golpe"
  - accionEspecial: String = "Bendecir a un aliado, aumentando su defensa"
  + exorcizar(): void
  + bendecirAliado(): void
    }
   
    class GolemDePiedra extends PersonajeJugable {
  - habilidad: String = "Ataque de golpe que daña a todos los enemigos adyacentes"
  - accionEspecial: String = "Bloquear el paso de enemigos"
  + ataqueGolpe(): void
  + bloquearPaso(): void
    }
   
   class HechiceroOscuro extends PersonajeJugable {
  - habilidad: String = "Lanzar hechizos potentes a largo alcance"
  - accionEspecial: String = "Invocar un Gólem Oscuro para atacar enemigos"
  + lanzarHechizo(): void
  + invocarGolemOscuro(): void
    }
   
    class ArqueroElfico extends PersonajeJugable {
  - habilidad: String = "Disparar flechas precisas a larga distancia"
  - accionEspecial: String = "Evadir ataques enemigos"
  + dispararFlechaPrecisa(): void
  + evadirAtaque(): void
    }
   
    class GuerreroDraconico extends PersonajeJugable {
  - habilidad: String = "Aliento de fuego que daña múltiples cuadros"
  - accionEspecial: String = "Golpe con cola que empuja enemigos"
  + alientoDeFuego(): void
  + golpeConCola(): void
    }
}

' --- Agrupación: Enemigos ---
package "Enemigos" { 
  abstract class Enemigo {
        - nombre: String
        - rango: String
        - daño: int
        - salud: int
        - habilidadesEspeciales: List<String>
        - debilidad: String
        + atacar(): void
        + usarHabilidad(): void
    }
Enemigo --> Animación : "provoca" [1..*]
    Enemigo --> Trampa : "afectado por" [0..*]
    Enemigo --> GestorSonido : "genera sonidos" [1..*]
   
    class ZombieComun extends Enemigo {
  - habilidad: String = "Ataca a los personajes en cuadros adyacentes"
  - debilidad: String = "Movimiento lento"
  + atacarCortoRango(): void
    }
    
    class ZombieCorredor extends Enemigo {
  - habilidad: String = "Se mueve el doble de rápido que otros zombies"
  - debilidad: String = "Menos resistencia"
  + atacarRapido(): void
    }
    
    class EsqueletoArmado extends Enemigo {
  - habilidad: String = "Lanza flechas desde lejos"
  - debilidad: String = "Vulnerable a ataques cuerpo a cuerpo"
  + lanzarFlecha(): void
    }
   
    class Fantasma extends Enemigo {
  - habilidad: String = "Atraviesa paredes y maldice a los personajes"
  - debilidad: String = "Solo puede ser dañado con ataques mágicos"
  + maldecir(): void
}
    class NecromanteEnemigo extends Enemigo {
  - habilidad: String = "Invoca zombies y esqueletos"
  - debilidad: String = "Baja defensa"
  + invocarMinion(): void 
  }
   
    class ReyEspectral extends Enemigo {
  - habilidad: String = "Invoca guardianes y lanza rayos oscuros"
  - debilidad: String = "Vulnerable a ataques masivos"
  + invocarGuardianes(): void
  + usarRayoOscuro(): void
  + activarMaldicionFinal(): void
    } 
    }


 '--- Clases Misceláneas ---
package "ClasesMisceláneas" { 
  class Coordenada {
        - x: int
        - y: int
        + setCoordenada(newX: int, newY: int): void
        + getX(): int
        + getY(): int
        + esIgual(otra: Coordenada): boolean
        + distanciaA(otra: Coordenada): double
        + mover(deltaX: int, deltaY: int): void
        + estaDentroDeLimites(limiteX: int, limiteY: int): boolean
    }
    class Animación {
        - tipoAnimacion: String
        - duracion: int
        + reproducir(): void
        + detener(): void
    }
    class Inventario {
        - objetos: List<Object>
        - limite: int = 10
        + agregarObjeto(objeto: Object): boolean
        + eliminarObjeto(objeto: Object): void
        + listarObjetos(): List<Object>
    }
    Inventario *-- Poción : composición
    Inventario o-- Llave : agregación
    class Poción {
        - tipo: String
        - efecto: String
        - cantidad: int
        + usar(): void
    }
    class Llave {
        - idLlave: String
        - tipoLlave: String
        + usarLlave(): boolean
    }
    class GestorGuardado {
        + guardarPartida(): void
        + cargarPartida(): void
    }
    class GestorSonido {
        + reproducirEfecto(): void
        + detenerSonido(): void
    }
}

' --- Relaciones adicionales ---
EventoAleatorio o-- PersonajeJugable : agregación
EventoAleatorio o-- Enemigo : agregación
EventoAleatorio *-- Trampa : composición
EventoAleatorio *-- Poción : composición

@enduml
